# Function for one-hot encoding
def one_hot_encoding(label_data):
    row_number = label_data.shape[0]
    num_labels = 10  # MNIST dataset (0-9)
    encoded_labels = np.zeros((row_number, num_labels), dtype='int')
    encoded_labels[list(range(row_number)), label_data] = 1
    return encoded_labels

# Function to read pixel data from the dataset
def read_pixels(data_path):
    with open(data_path, 'rb') as f:
        pixel_data = np.frombuffer(f.read(), 'B', offset=16).astype('float32')
    flattened_pixels = pixel_data.reshape(-1, 784)
    normalized_pixels = flattened_pixels / 255
    return normalized_pixels

# Function to read label data from the dataset
def read_labels(data_path):
    with open(data_path, 'rb') as f:
        label_data = np.frombuffer(f.read(), 'B', offset=8)
    one_hot_encoding_labels = one_hot_encoding(label_data)
    return one_hot_encoding_labels

# Function to read the entire dataset
def read_dataset(path):
    X_train = read_pixels(path+"/train-images-idx3-ubyte")
    y_train = read_labels(path+"/train-labels-idx1-ubyte")
    X_test = read_pixels(path+"/t10k-images-idx3-ubyte")
    y_test = read_labels(path+"/t10k-labels-idx1-ubyte")
    return X_train, y_train, X_test, y_test

# For Question 2.4
# Code to visualize weights (use your own weight variable, adjust its shape by yourself)
plt.matshow(weight, cmap=plt.cm.gray, vmin=0.5*weight.min(), vmax=0.5*weight.max())